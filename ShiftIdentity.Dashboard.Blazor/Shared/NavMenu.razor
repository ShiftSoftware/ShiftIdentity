@using Pages.User
@using Pages.App
@using Pages.AccessTree
@using Pages.Department
@using Pages.Service
@using Pages.Company
@using Pages.CompanyBranch
@using Pages.Region
@using Pages.City
@using ShiftSoftware.ShiftIdentity.Dashboard.Blazor.Pages.Brand
@using ShiftSoftware.ShiftIdentity.Dashboard.Blazor.Pages.Team

@inject ShiftIdentityDashboardBlazorOptions ShiftIdentityDashboardBlazorOptions
@inject ITypeAuthService TypeAuthService

<MudNavMenu>
    <AuthorizedMudNavLink Href="@($"{Constants.IdentityRoutePreifix}/{nameof(RegionList)}")"
                          Match="NavLinkMatch.All"
                          Icon="@Icons.Material.Outlined.Map"
                          TypeAuthAction="ShiftIdentityActions.Regions">Regions</AuthorizedMudNavLink>

    <AuthorizedMudNavLink Href="@($"{Constants.IdentityRoutePreifix}/{nameof(CityList)}")"
                          Match="NavLinkMatch.All"
                          Icon="@Icons.Material.Outlined.AccountBalance"
                          TypeAuthAction="ShiftIdentityActions.Cities">Cities</AuthorizedMudNavLink>

    <AuthorizedMudNavLink Href="@($"{Constants.IdentityRoutePreifix}/{nameof(BrandList)}")"
                          Match="NavLinkMatch.All"
                          Icon="@Icons.Material.Outlined.LocalMall"
                          TypeAuthAction="ShiftIdentityActions.Brands">Brands</AuthorizedMudNavLink>

    <AuthorizedMudNavLink Href="@($"{Constants.IdentityRoutePreifix}/{nameof(DepartmentList)}")"
                          Match="NavLinkMatch.All"
                          Icon="@Icons.Material.Outlined.Dashboard"
                          TypeAuthAction="ShiftIdentityActions.Departments">Departments</AuthorizedMudNavLink>

    <AuthorizedMudNavLink Href="@($"{Constants.IdentityRoutePreifix}/{nameof(ServiceList)}")"
                          Match="NavLinkMatch.All"
                          Icon="@Icons.Material.Outlined.Checklist"
                          TypeAuthAction="ShiftIdentityActions.Services">Services</AuthorizedMudNavLink>

    <AuthorizedMudNavLink Href="@($"{Constants.IdentityRoutePreifix}/{nameof(CompanyList)}")"
                          Match="NavLinkMatch.All"
                          Icon="@Icons.Material.Outlined.Business"
                          TypeAuthAction="ShiftIdentityActions.Companies">Companies</AuthorizedMudNavLink>

    <AuthorizedMudNavLink Href="@($"{Constants.IdentityRoutePreifix}/{nameof(CompanyBranchList)}")"
                          Match="NavLinkMatch.All"
                          Icon="@Icons.Material.Outlined.AddBusiness"
                          TypeAuthAction="ShiftIdentityActions.CompanyBranches">Branches</AuthorizedMudNavLink>

    @if (ShiftIdentityDashboardBlazorOptions.ShiftIdentityHostingType == ShiftIdentityHostingTypes.External)
    {
        <AuthorizedMudNavLink Href="@($"{Constants.IdentityRoutePreifix}/{nameof(AppList)}")"
                              Match="NavLinkMatch.All"
                              Icon="@Icons.Material.Outlined.Apps"
                              TypeAuthAction="ShiftIdentityActions.Apps">Apps</AuthorizedMudNavLink>

    }

    <AuthorizedMudNavLink Href="@($"{Constants.IdentityRoutePreifix}/{nameof(AccessTreeList)}")"
                          Match="NavLinkMatch.All"
                          Icon="@Icons.Material.Outlined.AccountTree"
                          TypeAuthAction="ShiftIdentityActions.AccessTrees">Access Trees</AuthorizedMudNavLink>

    <AuthorizedMudNavLink Href="@($"{Constants.IdentityRoutePreifix}/{nameof(UserList)}")"
                          Match="NavLinkMatch.All"
                          Icon="@Icons.Material.Outlined.People"
                          TypeAuthAction="ShiftIdentityActions.Users">Users</AuthorizedMudNavLink>

    <AuthorizedMudNavLink Href="@($"{Constants.IdentityRoutePreifix}/{nameof(TeamList)}")"
                          Match="NavLinkMatch.All"
                          Icon="@Icons.Material.Outlined.Groups"
                          TypeAuthAction="ShiftIdentityActions.Teams">Teams</AuthorizedMudNavLink>
</MudNavMenu>

@code {
    [Parameter] public bool isDrawerOpen { get; set; }
}