@using ShiftSoftware.TypeAuth.Core;
@inject ITypeAuthService tAuth
@inject ShiftIdentityDashboardBlazorOptions shiftIdentityDashboardBlazorOptions
@inject HttpService httpService

<style>
    .mud-treeview-item-content {
        padding: 0;
    }

    .no-margin .mud-button-icon-start {
        margin: 0 !important;
    }

    .type-auth-tree-text {
        margin: 0;
    }

        .type-auth-tree-text .mud-input-slot {
            padding: 3.8px 10px !important;
            font-size: 14px !important;
            background: #fafafa !important;
        }
</style>

<MudPaper Elevation="2">
    <MudToolBar Dense="true" Class="light-toolbar shift-toolbar-header">
        <MudIcon Icon="@Icons.Material.Filled.LockOpen"></MudIcon>
        <MudText Class="px-4" Style="margin:0;">Actions</MudText>
    </MudToolBar>

   
    @if (this.TreeItems.Count == 0)
    {
        <MudAlert Severity="Severity.Warning">No Items found.</MudAlert>
    }
    else
    {
        <MudTreeView Items="@TreeItems" ExpandOnClick="true" Hover="true">
            <ItemTemplate>

                @if (context.Value != null && (context.Value.ActionTreeItems.Count > 0 || context.Value.Action != null))
                {
                    var item = context.Value;
                    <MudTreeViewItem Items="@item.ActionTreeItems.Select(x => new TreeItemData(x)).ToArray()" ExpandedChanged="@((x) => {item.AdditionalData!.Expanded = x;})" Expanded="@((bool) item.AdditionalData!.Expanded)">
                        <Content>
                            <MudTreeViewItemToggleButton ExpandedChanged="@((x) => { item.AdditionalData!.Expanded = x;})" Visible="@(item.ActionTreeItems.Count > 0)" Expanded="@((bool) item.AdditionalData!.Expanded)" />
                            @{
                                string StyleString = "";

                                if (item.AdditionalData?.Parent?.WildCardAccess?.Count > 0)
                                {
                                    StyleString = "transition:0.3s; padding-left:10px; padding-right:10px; display:flex; width:100%; align-items:center; border-top:1px solid #e1e1e1; padding-top:12px; padding-bottom:12px; opacity:0.6; background-color: var(--mud-palette-action-default-hover);";
                                }
                                else
                                {
                                    StyleString = "transition:0.3s; padding-left:10px; padding-right:10px; display:flex; width:100%; align-items:center; border-top:1px solid #e1e1e1; padding-top:12px; padding-bottom:12px;";
                                }
                            }
                            <div style="@StyleString">

                                <ActionTreeItemIcon ActionTreeItem="item" />

                                <MudText>@(item.DisplayName ?? item.ID)</MudText>

                                <MudSpacer />

                                @if (item.ActionTreeItems.Count > 0)
                                {
                                    <div style="margin-right:5px;">
                                        <WildCardAccessButton LoggedInUserTreeItems="LoggedInUserTreeItems_Flattened" Access="Access.Maximum"
                                                              ActionTreeItem="item" ActionTreeItemChanged="StateHasChanged" Disabled="@(ReadOnly || Disabled)">
                                            Max
                                        </WildCardAccessButton>
                                    </div>
                                    <div style="margin-right:5px;">
                                        <WildCardAccessButton LoggedInUserTreeItems="LoggedInUserTreeItems_Flattened" Access="Access.Delete"
                                                              ActionTreeItem="item" ActionTreeItemChanged="StateHasChanged" Disabled="@(ReadOnly || Disabled)">
                                            Delete
                                        </WildCardAccessButton>
                                    </div>
                                    <div style="margin-right:5px;">
                                        <WildCardAccessButton LoggedInUserTreeItems="LoggedInUserTreeItems_Flattened" Access="Access.Write"
                                                              ActionTreeItem="item" ActionTreeItemChanged="StateHasChanged" Disabled="@(ReadOnly || Disabled)">
                                            Write
                                        </WildCardAccessButton>
                                    </div>
                                    <div>
                                        <WildCardAccessButton LoggedInUserTreeItems="LoggedInUserTreeItems_Flattened" Access="Access.Read"
                                                              ActionTreeItem="item" ActionTreeItemChanged="StateHasChanged" Disabled="@(ReadOnly || Disabled)">
                                            Read
                                        </WildCardAccessButton>
                                    </div>
                                }
                                else
                                {
                                    @if (item.Action?.Type == ActionType.ReadWriteDelete)
                                    {
                                        <AccessButton ActionTreeItem="item" Access="Access.Delete" TypeAuth_LoggedInUser="tAuth_LoggedInUser"
                                                      TypeAuth_View="tAuth_View" Disabled="@(ReadOnly || Disabled)">Delete</AccessButton>
                                    }

                                    @if (item.Action?.Type == ActionType.ReadWriteDelete || item.Action?.Type == ActionType.ReadWrite)
                                    {
                                        <div style="margin: 0 5px;">
                                            <AccessButton ActionTreeItem="item" Access="Access.Write" TypeAuth_LoggedInUser="tAuth_LoggedInUser"
                                                          TypeAuth_View="tAuth_View" Disabled="@(ReadOnly || Disabled)">Write</AccessButton>
                                        </div>
                                    }

                                    @if (item.Action?.Type == ActionType.ReadWriteDelete || item.Action?.Type == ActionType.ReadWrite || item.Action?.Type == ActionType.Read)
                                    {
                                        <AccessButton ActionTreeItem="item" Access="Access.Read" TypeAuth_LoggedInUser="tAuth_LoggedInUser"
                                                      TypeAuth_View="tAuth_View" Disabled="@(ReadOnly || Disabled)">Read</AccessButton>
                                    }

                                    @if (item.Action?.Type == ActionType.Boolean)
                                    {
                                        <AccessButton ActionTreeItem="item" Access="Access.Maximum" TypeAuth_LoggedInUser="tAuth_LoggedInUser"
                                                      TypeAuth_View="tAuth_View" Disabled="@(ReadOnly || Disabled)" />
                                    }

                                    @if (item.Action?.Type == ActionType.Text)
                                    {
                                        <TextAccessField ActionTreeItem="item" TypeAuth_LoggedInUser="tAuth_LoggedInUser" TypeAuth_View="tAuth_View"
                                                         ReadOnly="ReadOnly" Disabled="Disabled" />
                                    }
                                }
                            </div>
                        </Content>
                    </MudTreeViewItem>
                }
            </ItemTemplate>
        </MudTreeView>
    }
</MudPaper>

@code {
    public class TreeItemData : TreeItemData<ActionTreeNode>
    {
        public TreeItemData(ActionTreeNode value) : base(value)
        {
            Value = value;
        }
    }

    public IReadOnlyCollection<TreeItemData<ActionTreeNode>> TreeItems { get; set; } = Array.Empty<TreeItemData<ActionTreeNode>>();

    private List<ActionTreeNode> LoggedInUserTreeItems_Flattened = new List<ActionTreeNode> { };

    TypeAuthContext tAuth_View = new TypeAuthContext();
    TypeAuthContext tAuth_LoggedInUser = new TypeAuthContext();

    bool initialized = false;

    [Parameter]
    public string Tree { get; set; } = default!;

    [Parameter]
    public EventCallback<string> TreeChanged { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }
    [Parameter]
    public bool Disabled { get; set; }

    private async Task ExpandIdentityActions()
    {
        await Task.WhenAll(new List<Task>
        {
            Task.Run(async () => {
                var regions = await this.httpService.GetAsync<ShiftEntity.Model.Dtos.ODataDTO<ShiftIdentity.Core.DTOs.Region.RegionListDTO>>("/api/IdentityRegion?$orderby=Name");

                Core.ShiftIdentityActions.DataLevelAccess.Regions.Expand(regions.Data!.Value.Select((x) => { return new KeyValuePair<string, string>(x.ID!, x.Name); }).ToList(), true, true);
            }),

            Task.Run(async () => {
                var companies = await this.httpService.GetAsync<ShiftEntity.Model.Dtos.ODataDTO<ShiftIdentity.Core.DTOs.Company.CompanyListDTO>>("/api/IdentityCompany?$orderby=Name");

                Core.ShiftIdentityActions.DataLevelAccess.Companies.Expand(companies.Data!.Value.Select((x) => { return new KeyValuePair<string, string>(x.ID!, x.Name); }).ToList(), true, true);
            }),

            Task.Run(async () =>
            {
                var branches = await this.httpService.GetAsync<ShiftEntity.Model.Dtos.ODataDTO<ShiftIdentity.Core.DTOs.CompanyBranch.CompanyBranchListDTO>>("/api/IdentityCompanyBranch?$orderby=Company");

                Core.ShiftIdentityActions.DataLevelAccess.Branches.Expand(branches.Data!.Value.Select((x) => { return new KeyValuePair<string, string>(x.ID!, $"{x.Company} ↔ {x.Name}"); }).ToList(), true, true);
            }),

            Task.Run(async () =>
            {
                var teams = await this.httpService.GetAsync<ShiftEntity.Model.Dtos.ODataDTO<ShiftIdentity.Core.DTOs.Team.TeamListDTO>>("/api/IdentityTeam?$orderby=Name");

                Core.ShiftIdentityActions.DataLevelAccess.Teams.Expand(teams.Data!.Value.Select((x) => { return new KeyValuePair<string, string>(x.ID!, x.Name); }).ToList(), true, true);
            }),

            Task.Run(async () =>
            {
                var brands = await this.httpService.GetAsync<ShiftEntity.Model.Dtos.ODataDTO<ShiftIdentity.Core.DTOs.Brand.BrandListDTO>>("/api/IdentityBrand?$orderby=Name");

                Core.ShiftIdentityActions.DataLevelAccess.Brands.Expand(brands.Data!.Value.Select((x) => { return new KeyValuePair<string, string>(x.ID!, x.Name); }).ToList(), false, true);
            }),

            Task.Run(async () =>
            {
                var cities = await this.httpService.GetAsync<ShiftEntity.Model.Dtos.ODataDTO<ShiftIdentity.Core.DTOs.City.CityListDTO>>("/api/IdentityCity?$orderby=Name");

                Core.ShiftIdentityActions.DataLevelAccess.Cities.Expand(cities.Data!.Value.Select((x) => { return new KeyValuePair<string, string>(x.ID!, x.Name); }).ToList(), true, true);
            }),
        });
    }

    protected override async Task OnInitializedAsync()
    {
        this.tAuth_LoggedInUser = (tAuth as TypeAuthContext)!;

        var typeAuthBuilder = new TypeAuthContextBuilder();

        await ExpandIdentityActions();

        if (shiftIdentityDashboardBlazorOptions.DynamicTypeAuthActionExpander != null)
            await shiftIdentityDashboardBlazorOptions.DynamicTypeAuthActionExpander.Invoke();

        foreach (var actionTree in this.tAuth_LoggedInUser!.GetRegisteredActionTrees())
            typeAuthBuilder.AddActionTree(actionTree);

        this.tAuth_View = typeAuthBuilder
        .AddAccessTree(Tree)
        .Build();

        this.TraverseTree(tAuth_View.ActionTree, null);

        this.TraverseTree(tAuth_LoggedInUser.ActionTree, null, this.LoggedInUserTreeItems_Flattened);

        var tree = tAuth_View.ActionTree.ActionTreeItems;

        this.TreeItems = tree.Select(x => new TreeItemData(x)).ToArray();
        this.initialized = true;
    }

    void TraverseTree(ActionTreeNode tree, ActionTreeNode? parent, List<ActionTreeNode>? flattenedList = null)
    {
        if (flattenedList != null)
            flattenedList.Add(tree);

        tree.AdditionalData = new AdditionalTreeItem
            {
                Expanded = false,
                Parent = parent,
            };

        foreach (var item in tree.ActionTreeItems)
            TraverseTree(item, tree, flattenedList);
    }

    public string GenerateAccessTree()
    {
        return this.tAuth_View.GenerateAccessTree(tAuth_LoggedInUser);
    }
}
