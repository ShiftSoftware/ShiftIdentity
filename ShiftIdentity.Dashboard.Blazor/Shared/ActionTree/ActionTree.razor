@inject ShiftIdentityLocalizer Loc

<style>
    .mud-treeview-item-content {
        padding: 0;
    }

    .no-margin .mud-button-icon-start {
        margin: 0 !important;
    }

    .type-auth-tree-text {
        margin: 0;
    }

        .type-auth-tree-text .mud-input-slot {
            padding: 3.8px 10px !important;
            font-size: 14px !important;
            background: #fafafa !important;
        }
</style>

<MudPaper Elevation="2">
    <MudToolBar Dense="true" Class="light-toolbar shift-toolbar-header">
        <MudIcon Icon="@Icons.Material.Filled.LockOpen"></MudIcon>
        <MudText Class="px-4" Style="margin:0;">@Loc["Actions"]</MudText>
    </MudToolBar>

   
    @if (this.TreeItems.Count == 0)
    {
        <MudAlert Severity="Severity.Warning">@Loc["No Items found."]</MudAlert>
    }
    else
    {
        <MudTreeView Items="@TreeItems" ExpandOnClick="true" Hover="true">
            <ItemTemplate>

                @if (context.Value != null && (context.Value.ActionTreeItems.Count > 0 || context.Value.Action != null))
                {
                    var item = context.Value;
                    <MudTreeViewItem Items="@item.ActionTreeItems.Select(x => new TreeItemData(x)).ToArray()" ExpandedChanged="@((x) => {item.AdditionalData!.Expanded = x;})" Expanded="@((bool) item.AdditionalData!.Expanded)">
                        <Content>
                            <MudTreeViewItemToggleButton ExpandedChanged="@((x) => { item.AdditionalData!.Expanded = x;})" Visible="@(item.ActionTreeItems.Count > 0)" Expanded="@((bool) item.AdditionalData!.Expanded)" />
                            @{
                                string StyleString = "";

                                if (item.AdditionalData?.Parent?.WildCardAccess?.Count > 0)
                                {
                                    StyleString = "transition:0.3s; padding-left:10px; padding-right:10px; display:flex; width:100%; align-items:center; border-top:1px solid #e1e1e1; padding-top:12px; padding-bottom:12px; opacity:0.6; background-color: var(--mud-palette-action-default-hover);";
                                }
                                else
                                {
                                    StyleString = "transition:0.3s; padding-left:10px; padding-right:10px; display:flex; width:100%; align-items:center; border-top:1px solid #e1e1e1; padding-top:12px; padding-bottom:12px;";
                                }
                            }
                            <div style="@StyleString">

                                <ActionTreeItemIcon ActionTreeItem="item" />

                                <MudText>@(item.DisplayName ?? item.ID)</MudText>

                                <MudSpacer />

                                @if (item.ActionTreeItems.Count > 0)
                                {
                                    <div style="margin-right:5px;">
                                        <WildCardAccessButton LoggedInUserTreeItems="LoggedInUserTreeItems_Flattened" Access="Access.Maximum"
                                                              ActionTreeItem="item" ActionTreeItemChanged="StateHasChanged" Disabled="@(ReadOnly || Disabled)">
                                            @Loc["Max"]
                                        </WildCardAccessButton>
                                    </div>
                                    <div style="margin-right:5px;">
                                        <WildCardAccessButton LoggedInUserTreeItems="LoggedInUserTreeItems_Flattened" Access="Access.Delete"
                                                              ActionTreeItem="item" ActionTreeItemChanged="StateHasChanged" Disabled="@(ReadOnly || Disabled)">
                                            @Loc["Delete"]
                                        </WildCardAccessButton>
                                    </div>
                                    <div style="margin-right:5px;">
                                        <WildCardAccessButton LoggedInUserTreeItems="LoggedInUserTreeItems_Flattened" Access="Access.Write"
                                                              ActionTreeItem="item" ActionTreeItemChanged="StateHasChanged" Disabled="@(ReadOnly || Disabled)">
                                            @Loc["Write"]
                                        </WildCardAccessButton>
                                    </div>
                                    <div>
                                        <WildCardAccessButton LoggedInUserTreeItems="LoggedInUserTreeItems_Flattened" Access="Access.Read"
                                                              ActionTreeItem="item" ActionTreeItemChanged="StateHasChanged" Disabled="@(ReadOnly || Disabled)">
                                            @Loc["Read"]
                                        </WildCardAccessButton>
                                    </div>
                                }
                                else
                                {
                                    @if (item.Action?.Type == ActionType.ReadWriteDelete)
                                    {
                                        <AccessButton ActionTreeItem="item" Access="Access.Delete" TypeAuth_LoggedInUser="tAuth_LoggedInUser"
                                                      TypeAuth_View="tAuth_View" Disabled="@(ReadOnly || Disabled)">@Loc["Delete"]</AccessButton>
                                    }

                                    @if (item.Action?.Type == ActionType.ReadWriteDelete || item.Action?.Type == ActionType.ReadWrite)
                                    {
                                        <div style="margin: 0 5px;">
                                            <AccessButton ActionTreeItem="item" Access="Access.Write" TypeAuth_LoggedInUser="tAuth_LoggedInUser"
                                                          TypeAuth_View="tAuth_View" Disabled="@(ReadOnly || Disabled)">@Loc["Write"]</AccessButton>
                                        </div>
                                    }

                                    @if (item.Action?.Type == ActionType.ReadWriteDelete || item.Action?.Type == ActionType.ReadWrite || item.Action?.Type == ActionType.Read)
                                    {
                                        <AccessButton ActionTreeItem="item" Access="Access.Read" TypeAuth_LoggedInUser="tAuth_LoggedInUser"
                                                      TypeAuth_View="tAuth_View" Disabled="@(ReadOnly || Disabled)">@Loc["Read"]</AccessButton>
                                    }

                                    @if (item.Action?.Type == ActionType.Boolean)
                                    {
                                        <AccessButton ActionTreeItem="item" Access="Access.Maximum" TypeAuth_LoggedInUser="tAuth_LoggedInUser"
                                                      TypeAuth_View="tAuth_View" Disabled="@(ReadOnly || Disabled)" />
                                    }

                                    @if (item.Action?.Type == ActionType.Text)
                                    {
                                        <TextAccessField ActionTreeItem="item" TypeAuth_LoggedInUser="tAuth_LoggedInUser" TypeAuth_View="tAuth_View"
                                                         ReadOnly="ReadOnly" Disabled="Disabled" />
                                    }
                                }
                            </div>
                        </Content>
                    </MudTreeViewItem>
                }
            </ItemTemplate>
        </MudTreeView>
    }
</MudPaper>