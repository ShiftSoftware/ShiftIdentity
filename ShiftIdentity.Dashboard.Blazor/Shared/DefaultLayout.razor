@inherits ShiftMainLayout
@inject NavigationManager NavManager
@inject SettingManager SettingManager
@inject ShiftIdentityDashboardBlazorOptions ShiftIdentityDashboardBlazorOptions
@inject StorageService StorageService;
@inject AuthService AuthService

<MudRTLProvider RightToLeft="SettingManager.GetLanguage().RTL">

    <AddMudProviders />

    <MudLayout>

        <MudAppBar>
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            <MudLink Href="/"><MudText Style="color: #fff;">@ShiftIdentityDashboardBlazorOptions.Title</MudText></MudLink>

            <MudSpacer />

            <LanguageSwitcher />

            <MudMenu EndIcon="@Icons.Material.Filled.KeyboardArrowDown"
                     Label="@userdata?.FullName"
                     Color="Color.Primary"
                     Variant="Variant.Filled"
                     ActivationEvent="@MouseEvent.MouseOver"
                     AnchorOrigin="Origin.BottomCenter"
                     TransformOrigin="Origin.TopCenter">

                <MudMenuItem Href="@($"{Constants.IdentityRoutePreifix}/{nameof(UserDataForm)}")"><MudIcon Icon="@Icons.Material.Filled.PersonOutline" Title="Profile" /> Profile</MudMenuItem>
                <MudMenuItem OnClick="LogOut"><MudIcon Icon="@Icons.Material.Filled.Logout" Title="Log Out" /> Log Out</MudMenuItem>
            </MudMenu>
        </MudAppBar>

        <MudDrawer @bind-Open="@_drawerOpen" ClipMode="DrawerClipMode.Docked" Elevation="1" Variant="@DrawerVariant.Mini" Breakpoint="Breakpoint.Lg" OpenMiniOnHover="true">
            <NavMenu isDrawerOpen="_drawerOpen" />
        </MudDrawer>

        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.ExtraLarge" Style="padding-block: 24px;">
                @Body
            </MudContainer>
        </MudMainContent>

    </MudLayout>

</MudRTLProvider>

@code {
    bool _drawerOpen = false;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    TokenUserDataDTO userdata;

    protected override async Task OnInitializedAsync()
    {
        userdata = (await StorageService.GetTokenAsync()).UserData;

        await base.OnInitializedAsync();
    }

    private async Task LogOut()
    {
        await this.AuthService.LogOutAsync();

        //Force reload the page
        NavManager.NavigateTo(NavManager.Uri, true);
    }
}