@using Microsoft.Extensions.Configuration

@inherits LayoutBase
@inject SettingManager SettingManager
@inject ShiftIdentityDashboardBlazorOptions ShiftIdentityDashboardBlazorOptions

@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject ShiftIdentityLocalizer Loc

@inject IConfiguration Configuration

<MudRTLProvider RightToLeft="SettingManager.GetLanguage().RTL">

    <AddMudProviders />

    <MudLayout>

        <MudAppBar>
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            <MudLink Href="/"><MudText Style="color: #fff;">@ShiftIdentityDashboardBlazorOptions.Title</MudText></MudLink>

            <MudSpacer />

            @if (_isStaging || _isDevelopment)
            {
                <UserAvatar>
                    <MenuItemsTemplate>
                        <MudListItem OnClick="PullData" T="string">
                            <MudStack Row Style="gap: 15px; white-space: nowrap;">
                                @if (_pullingData)
                                {
                                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                }
                                else
                                {
                                    <MudIcon Style="opacity: 0.75;" Icon="@Icons.Material.Filled.Download" />
                                }

                                <MudText>@Loc["Pull Live Data"]</MudText>
                            </MudStack>
                        </MudListItem>
                    </MenuItemsTemplate>
                </UserAvatar>
            }
            else
            {
                <UserAvatar />
            }
        </MudAppBar>

        <MudDrawer @bind-Open="@_drawerOpen" ClipMode="DrawerClipMode.Docked" Elevation="1" Variant="@DrawerVariant.Mini" Breakpoint="Breakpoint.Lg" OpenMiniOnHover="true">
            <NavMenu isDrawerOpen="_drawerOpen" />
        </MudDrawer>

        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.ExtraLarge" Style="padding-block: 24px;">
                @Body
            </MudContainer>
        </MudMainContent>

    </MudLayout>

</MudRTLProvider>

@code {
    bool _drawerOpen = false;
    bool _pullingData = false;

    bool _isDevelopment;
    bool _isStaging;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override void OnInitialized()
    {
        var env = this.Configuration.GetValue<string>("Environment");

        if (!string.IsNullOrWhiteSpace(env))
        {
            _isDevelopment = env.Equals("Development", StringComparison.InvariantCultureIgnoreCase);
            _isStaging = env.Equals("Staging", StringComparison.InvariantCultureIgnoreCase);
        }

        base.OnInitialized();
    }

    async Task PullData()
    {
        if (this._pullingData)
            return;

        this._pullingData = true;

        StateHasChanged();

        try
        {
            var response = await HttpClient.GetAsync("IdentitySync/pull-live-db-data");

            response.EnsureSuccessStatusCode();

            this._pullingData = false;

            StateHasChanged();

            Snackbar.Add(message: "Successfully Pulled Live Data", severity: Severity.Success);
        }
        catch (Exception ex)
        {
            this._pullingData = false;

            StateHasChanged();

            Snackbar.Add(message: ex.Message, severity: Severity.Error);
        }
    }
}