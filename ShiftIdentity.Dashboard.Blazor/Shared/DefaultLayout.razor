@inherits LayoutBase
@inject SettingManager SettingManager
@inject ShiftIdentityDashboardBlazorOptions ShiftIdentityDashboardBlazorOptions

@using Microsoft.AspNetCore.Components.WebAssembly.Hosting

@inject IWebAssemblyHostEnvironment Env
@inject HttpClient HttpClient
@inject ISnackbar Snackbar

<MudRTLProvider RightToLeft="SettingManager.GetLanguage().RTL">

    <AddMudProviders />

    <MudLayout>

        <MudAppBar>
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            <MudLink Href="/"><MudText Style="color: #fff;">@ShiftIdentityDashboardBlazorOptions.Title</MudText></MudLink>

            <MudSpacer />

            <UserAvatar></UserAvatar>
        </MudAppBar>

        <MudDrawer @bind-Open="@_drawerOpen" ClipMode="DrawerClipMode.Docked" Elevation="1" Variant="@DrawerVariant.Mini" Breakpoint="Breakpoint.Lg" OpenMiniOnHover="true">
            <NavMenu isDrawerOpen="_drawerOpen" />
        </MudDrawer>

        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.ExtraLarge" Style="padding-block: 24px;">
                @if (Env.IsStaging() || Env.IsDevelopment())
                {
                    <MudButton Disabled="@_pullingData" OnClick="PullData" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" Class="mb-3">
                        @if (_pullingData)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                            <MudText Class="ms-2">Pulling Data</MudText>
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Download" Size="Size.Small" />
                            <MudText Class="ms-2">Pull Live Data</MudText>
                        }
                    </MudButton>
                }

                @Body
            </MudContainer>
        </MudMainContent>

    </MudLayout>

</MudRTLProvider>

@code {
    bool _drawerOpen = false;
    bool _pullingData = false;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    async Task PullData()
    {
        if (this._pullingData)
            return;

        this._pullingData = true;

        StateHasChanged();

        try
        {
            await HttpClient.GetAsync("IdentitySync/pull-live-db-data");

            this._pullingData = false;

            StateHasChanged();

            Snackbar.Add(message: "Successfully Pulled Live Data", severity: Severity.Success);
        }
        catch (Exception ex)
        {
            this._pullingData = false;

            StateHasChanged();

            Snackbar.Add(message: ex.Message, severity: Severity.Error);
        }
    }
}