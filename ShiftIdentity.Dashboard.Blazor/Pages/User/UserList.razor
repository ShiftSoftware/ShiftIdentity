@attribute [Authorize]
@layout Shared.DefaultLayout

@attribute [Route($"{Constants.IdentityRoutePreifix}/{nameof(UserList)}")]
@using ShiftSoftware.ShiftIdentity.Core.DTOs.User;
@inject IDialogService DialogService
@inject HttpClient Http
@inject MessageService MessageService

<ShiftList EntitySet="@($"{Constants.IdentityRoutePreifix}User")"
           Title="User List"
           T="UserListDTO"
           @ref="ShiftList"
           ComponentType="typeof(UserForm)"
           ShowIDColumn
           Dense
           EnableSelection
            TypeAuthAction="ShiftIdentityActions.Users"
           EnableExport>

    <ToolbarStartTemplate>
        <MudButton Color="Color.Error"
                   Variant="Variant.Outlined"
                   Size="Size.Small"
                   StartIcon="@Icons.Material.Filled.LockReset"
                   Disabled="!(ShiftList!.SelectedItems?.Count > 0)"
                   OnClick="AssignRandomPasswords">
            Assign Random Passwords
        </MudButton>
    </ToolbarStartTemplate>

    <ChildContent>
        <PropertyColumn Title="Name" Property="x => x.FullName" />
        <PropertyColumn Title="Username" Property="x => x.Username" />
        <PropertyColumn Title="Phone" Property="x => x.Phone" />
        <PropertyColumn Title="Email" Property="x => x.Email" />
        <PropertyColumn Title="Branch" Property="x => x.CompanyBranch" />
        <PropertyColumn Format="F" Property="x => x.LastSeen.DateTime" Title="Last Seen">
            <CellTemplate>
                @if (context?.Item?.LastSeen.DateTime > DateTimeOffset.MinValue)
                {
                    @context.Item.LastSeen.DateTime
                }
            </CellTemplate>
        </PropertyColumn>
    </ChildContent>
</ShiftList>

@code {
    public ShiftList<UserListDTO>? ShiftList { get; set; }

    private async Task AssignRandomPasswords()
    {
        var ids = ShiftList!.SelectedItems?.Select(x => x.ID);

        if (ids?.Count() == 0)
            return;

        var confirmForm = await DialogService.ShowAsync<ResetPasswordConfirmationDialog>("Warning");

        var data = (await confirmForm.Result).Data as Tuple<bool, bool>;

        if (data is not null && data.Item1)
        {
            using var response = await Http.PostAsJsonAsync<IEnumerable<string>>($"API/{Constants.IdentityRoutePreifix}User/AssignRandomPasswords?shareWithUser={data.Item2}", ids!);

            var users = await response.Content.ReadFromJsonAsync<IEnumerable<UserInfoDTO>>();

            if (response.IsSuccessStatusCode)
            {
                if (data.Item2)
                {
                    this.MessageService.Success($"The Password for ({users?.Count()}) users has been reseted.");
                }
                else
                {
                    var parameters = new DialogParameters<ResetPasswordResultDialog>();

                    parameters.Add(x => x.Users, users);

                    await this.DialogService.ShowAsync<ResetPasswordResultDialog>("Password Reset Results", parameters);
                }
            }
            else
            {
                this.MessageService.Error("An error occurred while resetting the password.");
            }
        }
    }
}