@attribute [Authorize]
@layout Shared.DefaultLayout

@attribute [Route($"{Constants.IdentityRoutePreifix}/{nameof(UserList)}")]
@using ShiftSoftware.ShiftIdentity.Core.DTOs.Company
@using ShiftSoftware.ShiftIdentity.Core.DTOs.CompanyBranch
@using ShiftSoftware.ShiftIdentity.Core.DTOs.User;
@inject IDialogService DialogService
@inject HttpClient Http
@inject MessageService MessageService
@inject ShiftIdentityLocalizer Loc

<ShiftList EntitySet="@($"{Constants.IdentityRoutePreifix}User")"
           Title="@Loc["User List"]"
           T="UserListDTO"
           @ref="ShiftList"
           ComponentType="typeof(UserForm)"
           Dense
           FilterPanelDefaultOpen
           EnableFilterPanel
           EnableSelection
           TypeAuthAction="ShiftIdentityActions.Users"
           EnableExport>

    <ToolbarStartTemplate>

        <MudStack Row>
            <ActionButton Color="Color.Error"
                          Variant="Variant.Outlined"
                          Size="Size.Small"
                          StartIcon="@Icons.Material.Filled.LockReset"
                          Confirm
                          OnResult="AssignRandomPasswordsResponse"
                          T="UserListDTO"
                          Endpoint="@($"{Constants.IdentityRoutePreifix}User/AssignRandomPasswords?shareWithUser={SharePasswordWithUser}")">

                <DialogBodyTemplate>
                    <MudCheckBox @bind-Value="SharePasswordWithUser" Label="@Loc["Send login info to the user"]" />
                </DialogBodyTemplate>
                <ChildContent>
                    @Loc["Assign Random Passwords"]
                </ChildContent>
            </ActionButton>

            <ActionButton Color="Color.Error"
                          Variant="Variant.Outlined"
                          Size="Size.Small"
                          StartIcon="@Icons.Material.Filled.Email"
                          Confirm
                          OnResult="VerifyEmailsResponse"
                          T="UserListDTO"
                          Endpoint="@($"{Constants.IdentityRoutePreifix}User/VerifyEmails")">
                @Loc["Verify Emails"]
            </ActionButton>

            <ActionButton Color="Color.Error"
                          Variant="Variant.Outlined"
                          Size="Size.Small"
                          StartIcon="@Icons.Material.Filled.Phone"
                          Confirm
                          OnResult="VerifyPhonesResponse"
                          T="UserListDTO"
                          Endpoint="@($"{Constants.IdentityRoutePreifix}User/VerifyPhones")">
                @Loc["Verify Phones"]
            </ActionButton>

            <MudButton Color="Color.Primary"
                       Variant="Variant.Outlined"
                       Class="mr-5"
                       Size="Size.Small"
                       OnClick="@(()=>OpenImportModal(null))">
                <MudIcon Icon="@Icons.Material.Filled.AttachFile" />
                @Loc["Import"]
            </MudButton>
        </MudStack>

    </ToolbarStartTemplate>

    <ChildContent>

        <StringFilter Property="x => x.FullName" Label="@Loc["Name"]" Operator="ShiftBlazor.Enums.ODataOperator.Contains" lg="4" md="6" sm="12" xs="12" />
        <StringFilter Property="x => x.Username" Label="@Loc["Username"]" Operator="ShiftBlazor.Enums.ODataOperator.Contains" lg="4" md="6" sm="12" xs="12" />
        <StringFilter Property="x => x.Phone" Label="@Loc["Phone"]" Operator="ShiftBlazor.Enums.ODataOperator.Contains" lg="4" md="6" sm="12" xs="12" />
        <StringFilter Property="x => x.Email" Label="@Loc["Email"]" Operator="ShiftBlazor.Enums.ODataOperator.Contains" lg="4" md="6" sm="12" xs="12" />
        <ForeignFilter @ref="CompanyFilter" Property="x => x.CompanyID" Label="@Loc["Company"]" DTOType="typeof(CompanyListDTO)" EntitySet="@($"{Constants.IdentityRoutePreifix}Company")" lg="4" md="6" sm="12" xs="12" />
        <ForeignFilter Property="x => x.CompanyBranchID" AutocompleteFilter="x => x.Add(CompanyFilter?.Filter)" Label="@Loc["Branch"]" DTOType="typeof(CompanyBranchListDTO)" EntitySet="@($"{Constants.IdentityRoutePreifix}CompanyBranch")" lg="4" md="6" sm="12" xs="12" />
        <DateTimeFilter Property="x => x.LastSeen" Label="@Loc["Last Seen"]" lg="4" md="6" sm="12" xs="12" />

        <PropertyColumn Title="@Loc["Name"]" Property="x => x.FullName" />
        <PropertyColumn Title="@Loc["Username"]" Property="x => x.Username" />
        <PropertyColumn Title="@Loc["Phone"]" Property="x => x.Phone">
            <CellTemplate Context="cel">
                <MudPaper Elevation="0" Class="d-flex align-items-center p-2">
                    <span class="align-middle">@cel?.Item?.Phone</span>
                    &nbsp;&nbsp;&nbsp;
                    @if (cel?.Item?.PhoneVerified == true)
                    {
                        <MudIcon Size="@Size.Small"
                                 Icon="@Icons.Material.Filled.Verified"
                                 Style="color:#3498DB"
                                 Title="@Loc["This phone number is verified"]"
                                 Class="mr-2" />
                    }
                </MudPaper>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Title="@Loc["Email"]" Property="x => x.Email">
            <CellTemplate Context="cel">
                <MudPaper Elevation="0" Class="d-flex align-items-center p-2">
                    <span class="align-middle">@cel?.Item?.Email</span>
                    &nbsp;&nbsp;&nbsp;
                    @if (cel?.Item?.EmailVerified == true)
                    {
                        <MudIcon Size="@Size.Small"
                                 Icon="@Icons.Material.Filled.Verified"
                                 Style="color:#3498DB"
                                 Title="@Loc["This email address is verified"]"
                                 Class="mr-2" />
                    }
                </MudPaper>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Title="@Loc["Branch"]" Property="x => x.CompanyBranch" />
        <PropertyColumnExtended Format="F" Property="x => x.LastSeen" Title="@Loc["Last Seen"]">

        </PropertyColumnExtended>
    </ChildContent>
</ShiftList>

@code {

    public ForeignFilter<UserListDTO, string?>? CompanyFilter { get; set; } 
    public ShiftList<UserListDTO>? ShiftList { get; set; }

    private bool SharePasswordWithUser { get; set; }

    private async Task OpenImportModal(long? id)
    {
        await ShiftList!.OpenDialog(typeof(UserImportForm));
    }

    // private async Task AssignRandomPasswords()
    // {
    //     var ids = ShiftList!.SelectedItems?.Select(x => x.ID);

    //     if (ids?.Count() == 0)
    //         return;

    //     var confirmForm = await DialogService.ShowAsync<ResetPasswordConfirmationDialog>("Warning");

    //     var data = (await confirmForm.Result).Data as Tuple<bool, bool>;

    //     if (data is not null && data.Item1)
    //     {
    //         using var response = await Http.PostAsJsonAsync<IEnumerable<string>>($"API/{Constants.IdentityRoutePreifix}User/AssignRandomPasswords?shareWithUser={data.Item2}", ids!);

    //         var users = await response.Content.ReadFromJsonAsync<IEnumerable<UserInfoDTO>>();

    //         if (response.IsSuccessStatusCode)
    //         {
    //             if (data.Item2)
    //             {
    //                 this.MessageService.Success($"The Password for ({users?.Count()}) users has been reseted.");
    //             }
    //             else
    //             {
    //                 var parameters = new DialogParameters<ResetPasswordResultDialog>();

    //                 parameters.Add(x => x.Users, users);

    //                 await this.DialogService.ShowAsync<ResetPasswordResultDialog>("Password Reset Results", parameters);
    //             }
    //         }
    //         else
    //         {
    //             this.MessageService.Error("An error occurred while resetting the password.");
    //         }
    //     }
    // }

    private async ValueTask<bool> AssignRandomPasswordsResponse(ShiftEntityResponse<IList<UserListDTO>> res)
    {
        if (res.Message == null)
        {
            var users = ((JsonElement?)res.Additional?["Users"])?.Deserialize<IEnumerable<UserInfoDTO>>() ?? [];

            if (SharePasswordWithUser)
            {
                this.MessageService.Success($"The Password for ({users.Count()}) users has been reseted.");
            }
            else
            {
                var parameters = new DialogParameters<ResetPasswordResultDialog>();

                parameters.Add(x => x.Users, users);

                await this.DialogService.ShowAsync<ResetPasswordResultDialog>("Password Reset Results", parameters);
            }
        }
        else
        {
            this.MessageService.Error("An error occurred while resetting the password.");
        }

        return false;
    }


    private ValueTask<bool> VerifyEmailsResponse(ShiftEntityResponse<IList<UserListDTO>> res)
    {
        if (res.Message == null && res.Entity?.Count > 0)
        {
            this.MessageService.Success($"The verification link send throw email for ({res.Entity.Count}) users.");
        }
        else
        {
            this.MessageService.Error("An error occurred while verifying the email.");
        }

        return ValueTask.FromResult(false);
    }

    private ValueTask<bool> VerifyPhonesResponse(ShiftEntityResponse<IList<UserListDTO>> res)
    {
        if (res.Message == null && res.Entity?.Count > 0)
        {
            this.MessageService.Success($"The Phone for ({res.Entity.Count}) users has been verified.");
        }
        else
        {
            this.MessageService.Error("An error occurred while verifying the phone.");
        }

        return ValueTask.FromResult(false);
    }

    // private async Task VerifyEmails()
    // {
    //     var ids = ShiftList!.SelectedItems?.Select(x => x.ID);

    //     if (ids?.Count() == 0)
    //         return;

    //     bool? result = await DialogService.ShowMessageBox(
    //     "Warning",
    //     $"Are you sure to verify {ids?.Count()} user emails?",
    //     yesText: "Yes", cancelText: "No");

    //     if (result != true)
    //         return;

    //     using var response = await Http.PostAsJsonAsync<IEnumerable<string>>($"API/{Constants.IdentityRoutePreifix}User/VerifyEmails", ids!);

    //     var users = await response.Content.ReadFromJsonAsync<IEnumerable<UserDTO>>();

    //     if (response.IsSuccessStatusCode)
    //     {
    //         this.MessageService.Success($"The Email for ({users?.Count()}) users has been verified.");
    //     }
    //     else
    //     {
    //         this.MessageService.Error("An error occurred while verifying the email.");
    //     }
    // }

    // private async Task VerifyPhones()
    // {
    //     var ids = ShiftList!.SelectedItems?.Select(x => x.ID);

    //     if (ids?.Count() == 0)
    //         return;

    //     bool? result = await DialogService.ShowMessageBox(
    //     "Warning",
    //     $"Are you sure to verify {ids?.Count()} user phones?",
    //     yesText: "Yes", cancelText: "No");

    //     if (result != true)
    //         return;

    //     using var response = await Http.PostAsJsonAsync<IEnumerable<string>>($"API/{Constants.IdentityRoutePreifix}User/VerifyPhones", ids!);

    //     var users = await response.Content.ReadFromJsonAsync<IEnumerable<UserDTO>>();

    //     if (response.IsSuccessStatusCode)
    //     {
    //         this.MessageService.Success($"The Phone for ({users?.Count()}) users has been verified.");
    //     }
    //     else
    //     {
    //         this.MessageService.Error("An error occurred while verifying the phone.");
    //     }
    // }
}