@attribute [Authorize]
@layout Shared.DefaultLayout

@attribute [Route($"{Constants.IdentityRoutePreifix}/{nameof(UserList)}")]
@using ShiftSoftware.ShiftIdentity.Core.DTOs.User;
@inject IDialogService DialogService
@inject HttpClient Http
@inject MessageService MessageService
@inject ShiftIdentityLocalizer Loc

<ShiftList EntitySet="@($"{Constants.IdentityRoutePreifix}User")"
           Title="@Loc["User List"]"
           T="UserListDTO"
           @ref="ShiftList"
           ComponentType="typeof(UserForm)"
           Dense
           EnableSelection
           TypeAuthAction="ShiftIdentityActions.Users"
           EnableExport>

    <ToolbarStartTemplate>

        <MudStack Row>
            <ActionButton Color="Color.Error"
                          Variant="Variant.Outlined"
                          Size="Size.Small"
                          StartIcon="@Icons.Material.Filled.LockReset"
                          Confirm
                          OnResponse="AssignRandomPasswordsResponse"
                          T="UserListDTO"
                          Action="@($"{Constants.IdentityRoutePreifix}User/AssignRandomPasswords?shareWithUser={SharePasswordWithUser}")"
                          >

                <DialogBodyTemplate>
                    <MudCheckBox @bind-Value="SharePasswordWithUser" Label="@Loc["Send login info to the user"]" />
                </DialogBodyTemplate>
                <ChildContent>
                    @Loc["Assign Random Passwords"]"
                </ChildContent>
            </ActionButton>

            <ActionButton Color="Color.Error"
                          Variant="Variant.Outlined"
                          Size="Size.Small"
                          StartIcon="@Icons.Material.Filled.Email"
                          Confirm
                          OnResponse="VerifyEmailsResponse"
                          T="UserListDTO"
                          Action="@($"{Constants.IdentityRoutePreifix}User/VerifyEmails")">
               @Loc["Verify Emails"]"
            </ActionButton>

            <ActionButton Color="Color.Error"
                          Variant="Variant.Outlined"
                          Size="Size.Small"
                          StartIcon="@Icons.Material.Filled.Phone"
                          Confirm
                          OnResponse="VerifyPhonesResponse"
                          T="UserListDTO"
                          Action="@($"{Constants.IdentityRoutePreifix}User/VerifyPhones")">
                @Loc["Verify Phones"]
            </ActionButton>
        </MudStack>

    </ToolbarStartTemplate>

    <ChildContent>
        <PropertyColumn Title="@Loc["Name"]" Property="x => x.FullName" />
        <PropertyColumn Title="@Loc["Username"]" Property="x => x.Username" />
        <PropertyColumn Title="@Loc["Phone"]" Property="x => x.Phone">
            <CellTemplate>
                <MudPaper Elevation="0" Class="d-flex align-items-center p-2">
                    <span class="align-middle">@context?.Item?.Phone</span>
                    &nbsp;&nbsp;&nbsp;
                    @if (context?.Item?.PhoneVerified == true)
                    {
                        <MudIcon Size="@Size.Small"
                                 Icon="@Icons.Material.Filled.Verified"
                                 Style="color:#3498DB"
                                 Title="@Loc["This phone number is verified"]"
                                 Class="mr-2" />
                    }
                </MudPaper>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Title="@Loc["Email"]" Property="x => x.Email">
            <CellTemplate>
                <MudPaper Elevation="0" Class="d-flex align-items-center p-2">
                    <span class="align-middle">@context?.Item?.Email</span>
                    &nbsp;&nbsp;&nbsp;
                    @if (context?.Item?.EmailVerified == true)
                    {
                        <MudIcon Size="@Size.Small"
                                 Icon="@Icons.Material.Filled.Verified"
                                 Style="color:#3498DB"
                                 Title="@Loc["This email address is verified"]"
                                 Class="mr-2" />
                    }
                </MudPaper>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Title="@Loc["Branch"]" Property="x => x.CompanyBranch" />
        <PropertyColumn Format="F" Property="x => x.LastSeen.DateTime" Title="@Loc["Last Seen"]">
            <CellTemplate>
                @if (context?.Item?.LastSeen.DateTime > DateTimeOffset.MinValue)
                {
                    @context.Item.LastSeen.DateTime
                }
            </CellTemplate>
        </PropertyColumn>
    </ChildContent>
</ShiftList>

@code {
    public ShiftList<UserListDTO>? ShiftList { get; set; }

    private bool SharePasswordWithUser { get; set; }

    // private async Task AssignRandomPasswords()
    // {
    //     var ids = ShiftList!.SelectedItems?.Select(x => x.ID);

    //     if (ids?.Count() == 0)
    //         return;

    //     var confirmForm = await DialogService.ShowAsync<ResetPasswordConfirmationDialog>("Warning");

    //     var data = (await confirmForm.Result).Data as Tuple<bool, bool>;

    //     if (data is not null && data.Item1)
    //     {
    //         using var response = await Http.PostAsJsonAsync<IEnumerable<string>>($"API/{Constants.IdentityRoutePreifix}User/AssignRandomPasswords?shareWithUser={data.Item2}", ids!);

    //         var users = await response.Content.ReadFromJsonAsync<IEnumerable<UserInfoDTO>>();

    //         if (response.IsSuccessStatusCode)
    //         {
    //             if (data.Item2)
    //             {
    //                 this.MessageService.Success($"The Password for ({users?.Count()}) users has been reseted.");
    //             }
    //             else
    //             {
    //                 var parameters = new DialogParameters<ResetPasswordResultDialog>();

    //                 parameters.Add(x => x.Users, users);

    //                 await this.DialogService.ShowAsync<ResetPasswordResultDialog>("Password Reset Results", parameters);
    //             }
    //         }
    //         else
    //         {
    //             this.MessageService.Error("An error occurred while resetting the password.");
    //         }
    //     }
    // }

    private async Task AssignRandomPasswordsResponse(ShiftEvent<ShiftEntityResponse<List<UserListDTO>>> data)
    {
        var res = data.Data;

        if (res.Message == null)
        {
            var users = ((JsonElement)res.Additional?["Users"]).Deserialize<IEnumerable<UserInfoDTO>>() ?? [];

            if (SharePasswordWithUser)
            {
                this.MessageService.Success($"The Password for ({users.Count()}) users has been reseted.");
            }
            else
            {
                var parameters = new DialogParameters<ResetPasswordResultDialog>();

                parameters.Add(x => x.Users, users);

                await this.DialogService.ShowAsync<ResetPasswordResultDialog>("Password Reset Results", parameters);
            }
        }
        else
        {
            this.MessageService.Error("An error occurred while resetting the password.");
        }
    }


    private void VerifyEmailsResponse(ShiftEvent<ShiftEntityResponse<List<UserListDTO>>> data)
    {
        var res = data.Data;

        if (res.Message == null && res.Entity?.Count > 0)
        {
            this.MessageService.Success($"The verification link send throw email for ({res.Entity.Count}) users.");
        }
        else
        {
            this.MessageService.Error("An error occurred while verifying the email.");
        }
    }

    private void VerifyPhonesResponse(ShiftEvent<ShiftEntityResponse<List<UserListDTO>>> data)
    {
        var res = data.Data;

        if (res.Message == null && res.Entity?.Count > 0)
        {
            this.MessageService.Success($"The Phone for ({res.Entity.Count}) users has been verified.");
        }
        else
        {
            this.MessageService.Error("An error occurred while verifying the phone.");
        }
    }

    // private async Task VerifyEmails()
    // {
    //     var ids = ShiftList!.SelectedItems?.Select(x => x.ID);

    //     if (ids?.Count() == 0)
    //         return;

    //     bool? result = await DialogService.ShowMessageBox(
    //     "Warning",
    //     $"Are you sure to verify {ids?.Count()} user emails?",
    //     yesText: "Yes", cancelText: "No");

    //     if (result != true)
    //         return;

    //     using var response = await Http.PostAsJsonAsync<IEnumerable<string>>($"API/{Constants.IdentityRoutePreifix}User/VerifyEmails", ids!);

    //     var users = await response.Content.ReadFromJsonAsync<IEnumerable<UserDTO>>();

    //     if (response.IsSuccessStatusCode)
    //     {
    //         this.MessageService.Success($"The Email for ({users?.Count()}) users has been verified.");
    //     }
    //     else
    //     {
    //         this.MessageService.Error("An error occurred while verifying the email.");
    //     }
    // }

    // private async Task VerifyPhones()
    // {
    //     var ids = ShiftList!.SelectedItems?.Select(x => x.ID);

    //     if (ids?.Count() == 0)
    //         return;

    //     bool? result = await DialogService.ShowMessageBox(
    //     "Warning",
    //     $"Are you sure to verify {ids?.Count()} user phones?",
    //     yesText: "Yes", cancelText: "No");

    //     if (result != true)
    //         return;

    //     using var response = await Http.PostAsJsonAsync<IEnumerable<string>>($"API/{Constants.IdentityRoutePreifix}User/VerifyPhones", ids!);

    //     var users = await response.Content.ReadFromJsonAsync<IEnumerable<UserDTO>>();

    //     if (response.IsSuccessStatusCode)
    //     {
    //         this.MessageService.Success($"The Phone for ({users?.Count()}) users has been verified.");
    //     }
    //     else
    //     {
    //         this.MessageService.Error("An error occurred while verifying the phone.");
    //     }
    // }
}