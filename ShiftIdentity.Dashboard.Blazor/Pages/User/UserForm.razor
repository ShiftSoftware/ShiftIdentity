@attribute [Authorize]
@layout Shared.DefaultLayout

@attribute [Route($"{Constants.IdentityRoutePreifix}/{nameof(UserForm)}/{{Key?}}")]
@inherits ShiftForm<UserForm, ShiftSoftware.ShiftIdentity.Core.DTOs.User.UserDTO>
@inject HttpClient Http
@inject ODataQuery odataQuery

@using ShiftSoftware.ShiftEntity.Model.Dtos
@using ShiftSoftware.ShiftBlazor.Enums
@using ShiftSoftware.ShiftIdentity.Core.DTOs.AccessTree
@using ShiftSoftware.ShiftIdentity.Core.DTOs.CompanyBranch

<ShiftEntityForm @bind-Mode="Mode"
                 @bind-Value="TheItem"
                 @ref="FormContainer"
                 Action="@($"{Constants.IdentityRoutePreifix}User")"
                 Title="User"
                 @bind-Key="@Key"
                 TypeAuthAction="ShiftIdentityActions.Users"
                 OnTaskFinished="@(()=> ready=true)"
                 OnSubmit="()=> { TheItem.AccessTree =  actionTree!.GenerateAccessTree(); }"
                 T="ShiftSoftware.ShiftIdentity.Core.DTOs.User.UserDTO">

    <MudTextField ReadOnly="@ReadOnly"
                  Disabled="@Disabled"
                  OnlyValidateIfDirty="true"
                  Label="Full Name"
                  @bind-Value="TheItem.FullName"
                  For="@(() => TheItem.FullName)" />

    <MudTextField ReadOnly="@ReadOnly"
                  Disabled="@Disabled"
                  OnlyValidateIfDirty="true"
                  Label="Username"
                  @bind-Value="TheItem.Username"
                  For="@(() => TheItem.Username)" />

    <MudTextField InputType="InputType.Password"
                  ReadOnly="@ReadOnly"
                  Disabled="@Disabled"
                  OnlyValidateIfDirty="true"
                  Label="Password"
                  @bind-Value="TheItem.Password"
                  For="@(() => TheItem.Password)"
                  HelperText="Choose a strong password" />

    <MudTextField ReadOnly="@ReadOnly"
                  Disabled="@Disabled"
                  OnlyValidateIfDirty="true"
                  Label="Phone"
                  @bind-Value="TheItem.Phone"
                  For="@(() => TheItem.Phone)" />

    <MudTextField ReadOnly="@ReadOnly"
                  Disabled="@Disabled"
                  OnlyValidateIfDirty="true"
                  Label="Email"
                  @bind-Value="TheItem.Email"
                  For="@(() => TheItem.Email)" />

    <MudDatePicker ReadOnly="@ReadOnly"
                   Disabled="@Disabled"
                   @bind-Date="TheItem.BirthDate"
                   For="@(() => TheItem.BirthDate)"
                   Label="Birth Date" />

    <MudItem>
        <MudCheckBox ReadOnly="@ReadOnly"
                     Disabled="@Disabled"
                     For="@(() => TheItem.IsActive)"
                     Label="Active"
                     @bind-Checked="@TheItem.IsActive"></MudCheckBox>
    </MudItem>

    <ShiftAutocomplete Label="Company Branch"
                       For="@(() => TheItem.CompanyBranchID)"
                       T="ShiftSoftware.ShiftEntity.Model.Dtos.ShiftEntitySelectDTO"
                       @bind-Value="TheItem.CompanyBranchID"
                       ToStringFunc="@(e=> e==null ? null : $"{e.Text}")"
                       TEntitySet="CompanyBranchListDTO"
                       ODataParameters="@(odataQuery.CreateODataParameterObject<CompanyBranchListDTO>("IdentityCompanyBranch", "ID", "Name"))" />

    <ShiftAutocomplete Label="Access Trees"
                       T="ShiftSoftware.ShiftEntity.Model.Dtos.ShiftEntitySelectDTO"
                       @bind-Value="LastSelectedAccessTree"
                       ToStringFunc="@(e=> e==null ? null : $"{e.Text}")"
                       ODataParameters="@(odataQuery.CreateODataParameterObject<AccessTreeDTO>("IdentityAccessTree", "ID", "Name"))"
                       TEntitySet="AccessTreeDTO" />

    <br />

    @foreach (var item in TheItem.AccessTrees)
    {
        <MudChip Color="Color.Primary" OnClose="() => RemoveAccessTreetItem(item)">@item.Text</MudChip>
    }

    <br />
    <br />

    @if (ready || Mode == FormModes.View || Mode == FormModes.Create)
    {
        <ActionTree @ref="actionTree" @bind-Tree="TheItem.AccessTree" ReadOnly="@ReadOnly" Disabled="@Disabled" />
    }
</ShiftEntityForm>

@code {
    private bool ready = false;
    Shared.ActionTree.ActionTree? actionTree;

    List<AccessTreeDTO> accessTress = new List<AccessTreeDTO>();

    protected async override Task OnInitializedAsync()
    {
        if (TheItem.ID == default)
            TheItem.AccessTree = "{}";
    }

    public ShiftSoftware.ShiftEntity.Model.Dtos.ShiftEntitySelectDTO? LastSelectedAccessTree
    {
        get { return null; }
        set
        {
            var currentList = TheItem.AccessTrees.ToList();

            if (!currentList.Any(x => x.Value.Equals(value!.Value)))
            {
                currentList.Add(value!);
            }

            TheItem.AccessTrees = currentList;
        }
    }

    public void RemoveAccessTreetItem(ShiftSoftware.ShiftEntity.Model.Dtos.ShiftEntitySelectDTO item)
    {
        if (Mode <= ShiftBlazor.Enums.FormModes.Archive)
            return;

        TheItem.AccessTrees = TheItem.AccessTrees.Where(x => !x.Value.Equals(item.Value)).ToList();
    }
}

