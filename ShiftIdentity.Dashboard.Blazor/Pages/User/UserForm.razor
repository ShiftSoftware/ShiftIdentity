@attribute [Authorize]
@layout Shared.DefaultLayout

@attribute [Route($"/{nameof(UserForm)}/{{Key?}}")]
@inherits ShiftForm<UserForm, ShiftSoftware.ShiftIdentity.Core.DTOs.User.UserDTO>
@inject HttpClient Http
@inject ODataQuery ODataQuery

@using ShiftSoftware.ShiftEntity.Model.Dtos
@using ShiftSoftware.ShiftBlazor.Enums

<ShiftEntityForm @bind-Mode="Mode"
                 @bind-Value="TheItem"
                 @ref="FormContainer"
                 Action="User"
                 Title="User"
                 Settings="@FormSetting"
                 @bind-Key="@Key"
                 OnTaskFinished="@(()=> ready=true)"
                 OnSubmit="()=> { TheItem.AccessTree =  actionTree!.GenerateAccessTree(); }"
                 T="ShiftSoftware.ShiftIdentity.Core.DTOs.User.UserDTO">

    <MudTextField ReadOnly="@ReadOnly"
                  Disabled="@Disabled"
                  OnlyValidateIfDirty="true"
                  Label="Full Name"
                  @bind-Value="TheItem.FullName"
                  For="@(() => TheItem.FullName)" />

    <MudTextField ReadOnly="@ReadOnly"
                  Disabled="@Disabled"
                  OnlyValidateIfDirty="true"
                  Label="Username"
                  @bind-Value="TheItem.Username"
                  For="@(() => TheItem.Username)" />

    <MudTextField InputType="InputType.Password"
                  ReadOnly="@ReadOnly"
                  Disabled="@Disabled"
                  OnlyValidateIfDirty="true"
                  Label="Password"
                  @bind-Value="TheItem.Password"
                  For="@(() => TheItem.Password)"
                  HelperText="Choose a strong password" />

    <MudTextField ReadOnly="@ReadOnly"
                  Disabled="@Disabled"
                  OnlyValidateIfDirty="true"
                  Label="Phone"
                  @bind-Value="TheItem.Phone"
                  For="@(() => TheItem.Phone)" />

    <MudTextField ReadOnly="@ReadOnly"
                  Disabled="@Disabled"
                  OnlyValidateIfDirty="true"
                  Label="Email"
                  @bind-Value="TheItem.Email"
                  For="@(() => TheItem.Email)" />

    <MudDatePicker ReadOnly="@ReadOnly"
                   Disabled="@Disabled"
                   @bind-Date="TheItem.BirthDate"
                   For="@(() => TheItem.BirthDate)"
                   Label="Birth Date" />

    <MudItem>
        <MudCheckBox ReadOnly="@ReadOnly"
                     Disabled="@Disabled"
                     For="@(() => TheItem.IsActive)"
                     Label="Active"
                     @bind-Checked="@TheItem.IsActive"></MudCheckBox>
    </MudItem>

    <MudSelect Disabled="@Disabled" ReadOnly="@ReadOnly" T="AccessTreeDTO" Label="Access Trees" MultiSelection="true" SelectedValues="TheItem.AccessTrees" SelectedValuesChanged="SelectedChanged" Comparer="Comparer" ToStringFunc="@(x=> x.Name)">
        @foreach (var accessTree in accessTress)
        {
            <MudSelectItem T="AccessTreeDTO" Value="@accessTree">@accessTree.Name</MudSelectItem>
        }
    </MudSelect>

    <br />

    @if (ready || Mode == FormModes.View || Mode == FormModes.Create)
    {
        <ActionTree @ref="actionTree" @bind-Tree="TheItem.AccessTree" ReadOnly="@ReadOnly" Disabled="@Disabled" />
    }
</ShiftEntityForm>

@code {

    class AccessTreeListDTOComparer : IEqualityComparer<AccessTreeDTO>
    {
        public bool Equals(AccessTreeDTO a, AccessTreeDTO b) => a.ID == b.ID;
        public int GetHashCode(AccessTreeDTO x) => HashCode.Combine(x.ID);
    }

    static AccessTreeListDTOComparer Comparer { get; } = new();

    private bool ready = false;
    Shared.ActionTree.ActionTree? actionTree;

    List<AccessTreeDTO> accessTress = new List<AccessTreeDTO>();

    protected async override Task OnInitializedAsync()
    {
        if (TheItem.ID == default)
            TheItem.AccessTree = "{}";

        var q = ODataQuery.CreateQuery<AccessTreeDTO>("AccessTree");

        accessTress = (await Http.GetFromJsonAsync<ODataDTO<AccessTreeDTO>>(q.ToString()))!.Value.ToList();
    }

    void SelectedChanged(IEnumerable<AccessTreeDTO> newSelected)
    {
        TheItem.AccessTrees = newSelected;
    }
}

