@attribute [Authorize]
@layout Shared.DefaultLayout
@attribute [Route($"{Constants.IdentityRoutePreifix}/{nameof(CompanyBranchForm)}/{{Key?}}")]
@inherits ShiftForm<CompanyBranchForm, ShiftSoftware.ShiftIdentity.Core.DTOs.CompanyBranch.CompanyBranchDTO>
@inject HttpClient Http
@inject ShiftIdentityDashboardBlazorOptions Options

@inject ODataQuery odataQuery

@using ShiftSoftware.ShiftEntity.Model.Enums
@using ShiftSoftware.ShiftIdentity.Core.DTOs.Brand
@using ShiftSoftware.ShiftIdentity.Dashboard.Blazor.Pages.Brand
@using ShiftSoftware.ShiftIdentity.Dashboard.Blazor.Pages.Department
@using ShiftSoftware.ShiftIdentity.Dashboard.Blazor.Pages.Service
@using ShiftSoftware.ShiftIdentity.Core.DTOs.Company
@using ShiftSoftware.ShiftIdentity.Core.DTOs.City
@using ShiftSoftware.ShiftIdentity.Core.DTOs.Department
@using ShiftSoftware.ShiftIdentity.Core.DTOs.Service



<ShiftEntityForm @bind-Mode="Mode"
                 @bind-Value="TheItem"
                 @ref="FormContainer"
                 Action="@($"{Constants.IdentityRoutePreifix}CompanyBranch")"
                 Title="Company Branch"
                 @bind-Key="@Key"
                 OnTaskFinished="OnTaskFinished"
                 TypeAuthAction="ShiftIdentityActions.Companies"
                 T="ShiftSoftware.ShiftIdentity.Core.DTOs.CompanyBranch.CompanyBranchDTO">
    <MudGrid>

        <MudItem xs="12" sm="12" lg="12" xl="12">
            <LocalizedTextField @bind-Value="TheItem.Name" Label="Name" For="() => TheItem.Name" />
        </MudItem>

        <MudItem xs="12" sm="6" lg="4" xl="3">
            <MudTextField ReadOnly="@ReadOnly"
                          Disabled="@Disabled"
                          OnlyValidateIfDirty="true"
                          Label="Short Code"
                          @bind-Value="TheItem.ShortCode"
                          For="@(() => TheItem.ShortCode)" />
        </MudItem>

        <MudItem xs="12" sm="6" lg="4" xl="3">
            <MudTextField ReadOnly="@ReadOnly"
                          Disabled="@Disabled"
                          OnlyValidateIfDirty="true"
                          Label="Externa lId"
                          @bind-Value="TheItem.ExternalId"
                          For="@(() => TheItem.ExternalId)" />
        </MudItem>

        <MudItem xs="12" sm="6" lg="4" xl="3">
            <ShiftAutocomplete Label="Company"
                               For="@(() => TheItem.Company)"
                               @bind-Value="TheItem.Company"
                               EntitySet="IdentityCompany"
                               TEntitySet="CompanyListDTO" />
        </MudItem>

        @* <MudItem xs="12" sm="6" lg="4" xl="4">
        <ShiftAutocomplete Label="Region"
        For="@(() => TheItem.Region)"
        T="ShiftSoftware.ShiftEntity.Model.Dtos.ShiftEntitySelectDTO"
        @bind-Value="TheItem.Region"
        ToStringFunc="@(e=> e==null ? null : $"{e.Text}")"
        ODataParameters="@(odataQuery.CreateODataParameterObject<RegionListDTO>("IdentityRegion", "ID", "Name"))"
        TEntitySet="RegionListDTO" />
        </MudItem> *@

        <MudItem xs="12" sm="6" lg="4" xl="3">
            <ShiftAutocomplete Label="City"
                               For="@(() => TheItem.City)"
                               @bind-Value="TheItem.City"
                               EntitySet="IdentityCity"
                               TEntitySet="CityListDTO" />
        </MudItem>

        <MudItem xs="12" sm="6" lg="4" xl="4">
            <MudTextField ReadOnly="@ReadOnly"
                          Disabled="@Disabled"
                          OnlyValidateIfDirty="true"
                          Label="Phone"
                          @bind-Value="TheItem.Phone"
                          For="@(() => TheItem.Phone)" />
        </MudItem>

        <MudItem xs="12" sm="6" lg="4" xl="4">
            <MudTextField ReadOnly="@ReadOnly"
                          Disabled="@Disabled"
                          OnlyValidateIfDirty="true"
                          Label="Short Phone"
                          @bind-Value="TheItem.ShortPhone"
                          For="@(() => TheItem.ShortPhone)" />
        </MudItem>

        <MudItem xs="12" sm="6" lg="4" xl="4">
            <MudTextField ReadOnly="@ReadOnly"
                          Disabled="@Disabled"
                          OnlyValidateIfDirty="true"
                          Label="HQ Email"
                          @bind-Value="TheItem.Email"
                          For="@(() => TheItem.Email)" />
        </MudItem>

        <MudItem xs="12" sm="12" lg="12" xl="12">
            @* <ShiftAutocomplete Label="Departments"
            @bind-Value="LastSelectedDepartment"
            TEntitySet="DepartmentListDTO"
            EntitySet="IdentityDepartment" /> *@

            <ShiftAutocompleteWithQuickAdd Label="Departments"
                                           TQuickAdd="ShiftSoftware.ShiftIdentity.Core.DTOs.Department.DepartmentDTO"
                                           QuickAddComponentType="@typeof(DepartmentForm)"
                                           @bind-Value="LastSelectedDepartment"
                                           TEntitySet="DepartmentListDTO"
                                           EntitySet="IdentityDepartment"
                                           QuickAddParameterName="@nameof(DepartmentForm.DepartmentName)" />

            <br />

            @foreach (var item in TheItem.Departments)
            {
                if (Mode == ShiftBlazor.Enums.FormModes.Edit || Mode == ShiftBlazor.Enums.FormModes.Create)
                {
                    <MudChip Color="Color.Secondary" OnClose="() => RemoveDepartmentItem(item)">@item.Text</MudChip>
                }
                else
                {
                    <MudChip Color="Color.Secondary">@item.Text</MudChip>
                }
            }
        </MudItem>

        <MudItem xs="12" sm="12" lg="12" xl="12">
            <ShiftAutocompleteWithQuickAdd Label="Services"
                                           TQuickAdd="ShiftSoftware.ShiftIdentity.Core.DTOs.Service.ServiceDTO"
                                           QuickAddComponentType="@typeof(ServiceForm)"
                                           @bind-Value="LastSelectedService"
                                           TEntitySet="ServiceListDTO"
                                           EntitySet="IdentityService"
                                           QuickAddParameterName="@nameof(ServiceForm.ServiceName)" />
            <br />

            @foreach (var item in TheItem.Services)
            {
                if(Mode == ShiftBlazor.Enums.FormModes.Edit || Mode == ShiftBlazor.Enums.FormModes.Create)
                {
                    <MudChip Color="Color.Secondary" OnClose="() => RemoveServiceItem(item)">@item.Text</MudChip>
                }
                else
                {
                    <MudChip Color="Color.Secondary">@item.Text</MudChip>
                }
            }
        </MudItem>

        <MudItem xs="12" sm="12" lg="12" xl="12">
            <ShiftAutocompleteWithQuickAdd Label="Brands"
                                           TQuickAdd="ShiftSoftware.ShiftIdentity.Core.DTOs.Brand.BrandDTO"
                                           QuickAddComponentType="@typeof(BrandForm)"
                                           @bind-Value="LastSelectedBrand"
                                           TEntitySet="BrandListDTO"
                                           EntitySet="IdentityBrand"
                                           QuickAddParameterName="@nameof(BrandForm.BrandName)" />
            <br />

            @foreach (var item in TheItem.Brands)
            {
                if (Mode == ShiftBlazor.Enums.FormModes.Edit || Mode == ShiftBlazor.Enums.FormModes.Create)
                {
                    <MudChip Color="Color.Secondary" OnClose="() => RemoveBrandItem(item)">@item.Text</MudChip>
                }
                else
                {
                    <MudChip Color="Color.Secondary">@item.Text</MudChip>
                }
            }
        </MudItem>

        <MudItem xs="12" sm="12" lg="12" xl="12">
            <LocalizedTextField @bind-Value="TheItem.Address" Label="Address" For="() => TheItem.Address" />
        </MudItem>

        <MudItem xs="12" sm="6" lg="4" xl="4">
            <MudTextField ReadOnly="@ReadOnly"
                          Disabled="@Disabled"
                          OnlyValidateIfDirty="true"
                          Label="Latitude"
                          @bind-Value="TheItem.Latitude"
                          For="@(() => TheItem.Latitude)" />
        </MudItem>

        <MudItem xs="12" sm="6" lg="4" xl="4">
            <MudTextField ReadOnly="@ReadOnly"
                          Disabled="@Disabled"
                          OnlyValidateIfDirty="true"
                          Label="Longitude"
                          @bind-Value="TheItem.Longitude"
                          For="@(() => TheItem.Longitude)" />
        </MudItem>

        <MudItem xs="12" sm="12" lg="12" xl="12">
            <FileUploader Url="/file/upload"
                          ShowThumbnail="true"
                          Label="Photos"
                          For="() => TheItem.Photos"
                          AcceptImages="true"
                          @bind-Values="TheItem.Photos" />
        </MudItem>

        @if (this.TheItem.CustomFields is not null && this.TheItem.CustomFields?.Count > 0)
        {
            @foreach (var field in this.TheItem.CustomFields)
            {
                <MudItem xs="12" sm="6" lg="3" xl="3">
                    <MudTextField ReadOnly="@ReadOnly"
                                  Disabled="@Disabled"
                                  Label="@field.Value.DisplayName"
                                  InputType="@(field.Value.IsPassword?InputType.Password:InputType.Text)"
                                  @bind-Value="this.TheItem.CustomFields[field.Key].Value" />
                </MudItem>
            }
        }
    </MudGrid>
</ShiftEntityForm>

@code {
    protected override Task OnInitializedAsync()
    {
        this.SetCustomFiles();

        return base.OnInitializedAsync();
    }

    private void OnTaskFinished()
    {
        this.SetCustomFiles();
    }

    private void SetCustomFiles()
    {
        foreach (var field in this.Options.CompanyBranchCustomFields)
        {
            if (this.TheItem.CustomFields?.ContainsKey(field.Key) ?? false)
                this.TheItem.CustomFields[field.Key]?.Set(field.Value);
            else
                this.TheItem.CustomFields?.TryAdd(field.Key, new CustomField(field.Value));
        }
    }

    public ShiftSoftware.ShiftEntity.Model.Dtos.ShiftEntitySelectDTO? LastSelectedDepartment
    {
        get { return null; }
        set
        {
            var currentList = TheItem.Departments.ToList();

            if (!currentList.Any(x => x.Value.Equals(value!.Value)))
            {
                currentList.Add(value!);
            }

            TheItem.Departments = currentList;
        }
    }

    public void RemoveDepartmentItem(ShiftSoftware.ShiftEntity.Model.Dtos.ShiftEntitySelectDTO item)
    {
        if (Mode <= ShiftBlazor.Enums.FormModes.Archive)
            return;

        TheItem.Departments = TheItem.Departments.Where(x => !x.Value.Equals(item.Value)).ToList();
    }

    public ShiftSoftware.ShiftEntity.Model.Dtos.ShiftEntitySelectDTO? LastSelectedService
    {
        get { return null; }
        set
        {
            var currentList = TheItem.Services.ToList();

            if (!currentList.Any(x => x.Value.Equals(value!.Value)))
            {
                currentList.Add(value!);
            }

            TheItem.Services = currentList;
        }
    }

    public void RemoveServiceItem(ShiftSoftware.ShiftEntity.Model.Dtos.ShiftEntitySelectDTO item)
    {
        if (Mode <= ShiftBlazor.Enums.FormModes.Archive)
            return;

        TheItem.Services = TheItem.Services.Where(x => !x.Value.Equals(item.Value)).ToList();
    }

    public ShiftSoftware.ShiftEntity.Model.Dtos.ShiftEntitySelectDTO? LastSelectedBrand
    {
        get { return null; }
        set
        {
            var currentList = TheItem.Brands.ToList();

            if (!currentList.Any(x => x.Value.Equals(value!.Value)))
            {
                currentList.Add(value!);
            }

            TheItem.Brands = currentList;
        }
    }

    public void RemoveBrandItem(ShiftSoftware.ShiftEntity.Model.Dtos.ShiftEntitySelectDTO item)
    {
        if (Mode <= ShiftBlazor.Enums.FormModes.Archive)
            return;

        TheItem.Brands = TheItem.Brands.Where(x => !x.Value.Equals(item.Value)).ToList();
    }
}