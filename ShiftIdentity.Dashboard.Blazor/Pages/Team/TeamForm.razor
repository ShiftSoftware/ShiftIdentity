@using ShiftSoftware.ShiftEntity.Model.Dtos
@using ShiftSoftware.ShiftIdentity.Core.DTOs.Team
@using ShiftSoftware.ShiftIdentity.Core.DTOs.Company
@attribute [Authorize]
@layout Shared.DefaultLayout


@attribute [Route($"{Constants.IdentityRoutePreifix}/{nameof(TeamForm)}/{{Key?}}")]
@inherits ShiftForm<TeamForm, ShiftSoftware.ShiftIdentity.Core.DTOs.Team.TeamDTO>
@inject HttpClient Http
@inject ODataQuery odataQuery

<ShiftEntityForm @bind-Mode="Mode"
                 @bind-Value="TheItem"
                 @ref="FormContainer"
                 Action="@($"{Constants.IdentityRoutePreifix}Team")"
                 Title="Team"
                 @bind-Key="@Key"
                 TypeAuthAction="ShiftIdentityActions.Teams"
                 T="ShiftSoftware.ShiftIdentity.Core.DTOs.Team.TeamDTO">

    <MudTextField ReadOnly="@ReadOnly"
                  Disabled="@Disabled"
                  OnlyValidateIfDirty="true"
                  Label="Team Name"
                  @bind-Value="TheItem.Name"
                  For="@(() => TheItem.Name)" />

    <ShiftAutocomplete Label="Company"
                       For="@(() => TheItem.Company)"
                       @bind-Value="TheItem.Company"
                       EntitySet="IdentityCompany"
                       TEntitySet="CompanyListDTO" />

    <MudTextField ReadOnly="@ReadOnly"
                  Disabled="@Disabled"
                  OnlyValidateIfDirty="true"
                  Label="Integration Id"
                  @bind-Value="TheItem.IntegrationId"
                  For="@(() => TheItem.IntegrationId)" />

    <ShiftAutocomplete Label="Users"
                       @bind-Value="LastSelectedUsers"
                       TEntitySet="UserListDTO"
                       EntitySet="IdentityUser" />

    <br />

    @foreach (var item in TheItem.Users)
    {
        <MudChip T="string" Color="Color.Primary" OnClose="() => RemoveUserItem(item)">@item.Text</MudChip>
    }
</ShiftEntityForm>

@code {
    public ShiftSoftware.ShiftEntity.Model.Dtos.ShiftEntitySelectDTO? LastSelectedUsers
    {
        get { return null; }
        set
        {
            var currentList = TheItem.Users.ToList();

            if (!currentList.Any(x => x.Value.Equals(value!.Value)))
            {
                currentList.Add(value!);
            }

            TheItem.Users = currentList;
        }
    }

    public void RemoveUserItem(ShiftSoftware.ShiftEntity.Model.Dtos.ShiftEntitySelectDTO item)
    {
        if (Mode <= ShiftBlazor.Enums.FormModes.Archive)
            return;

        TheItem.Users = TheItem.Users?.Where(x => !x.Value.Equals(item.Value)).ToList();
    }
}

