@attribute [Route($"{Constants.IdentityRoutePreifix}/{nameof(ResetPassword)}/{"{id}"}")]
@layout Shared.EmptyLayout

@inject ShiftIdentityDashboardBlazorOptions ShiftIdentityDashboardBlazorOptions
@inject HttpClient Http
@inject MessageService msgService
@inject NavigationManager NavManager

<MudGrid Justify="Justify.Center">
    <MudItem xs="12" sm="10" md="8" lg="6" xl="6">
        <MudPaper Class="pa-4">

            <br />
            <MudGrid Justify="Justify.Center">
                <MudItem xs="11" sm="11" md="10" lg="8" xl=6>
                    <MudImage Src="@ShiftIdentityDashboardBlazorOptions.LogoPath" Style="width:100%;" />
                </MudItem>
            </MudGrid>
            <br />
            <br />

            <EditForm Model="@dto" OnValidSubmit="ResetPasswordAsync">
                <DataAnnotationsValidator />
                <MudTextField T="string" Label="New Password" @bind-Value="dto.NewPassword" For="@(() => dto.NewPassword)"
                              InputType="InputType.Password" />

                <MudTextField T="string" Label="Confirm Password" @bind-Value="dto.ConfirmPassword"
                              For="@(() => dto.ConfirmPassword)" InputType="InputType.Password" />

                <br />
                <br />

                <MudGrid Justify="Justify.Center">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Reset Password</MudButton>
                </MudGrid>
            </EditForm>

            <br />
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    ResetPasswordDTO dto { get; set; } = new ResetPasswordDTO();

    [SupplyParameterFromQuery]
    public string expires { get; set; }

    [SupplyParameterFromQuery]
    public string token { get; set; }

    [Parameter]
    public string id { get; set; }

    private async Task ResetPasswordAsync()
    {
        var url = $"api/UserManager/ResetPassword/{id}?expires={expires}&token={token}";
        using var response = await Http.PostAsJsonAsync(url, dto);

        if (response.IsSuccessStatusCode)
        {
            msgService.Success("Your password reseted successfully");
            NavManager.NavigateTo($"{Constants.IdentityRoutePreifix}/login");
            return;
        };

        var data = await response.Content.ReadFromJsonAsync<ShiftEntityResponse<UserDataDTO>>();
        msgService.Error(data?.Message?.Body!);
    }
}
