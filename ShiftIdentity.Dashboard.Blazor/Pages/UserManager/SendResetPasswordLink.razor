@attribute [Route($"{Constants.IdentityRoutePreifix}/{nameof(SendResetPasswordLink)}")]
@layout Shared.EmptyLayout

@using ShiftSoftware.ShiftIdentity.Core.DTOs

@inject ShiftIdentityDashboardBlazorOptions ShiftIdentityDashboardBlazorOptions
@inject MessageService msgService
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject ShiftIdentityLocalizer Loc

<MudGrid Justify="Justify.Center">
    <MudItem xs="12" sm="10" md="8" lg="6" xl="6">
        <MudPaper Class="pa-4">

            <br />
            <MudGrid Justify="Justify.Center">
                <MudItem xs="11" sm="11" md="10" lg="8" xl=6>
                    <MudImage Src="@ShiftIdentityDashboardBlazorOptions.LogoPath" Style="width:100%;" />
                </MudItem>
            </MudGrid>
            <br />
            <br />

            <EditForm Model="@dto" OnValidSubmit="SendLink">
                <DataAnnotationsValidator />
                <MudTextField T="string" Label="@Loc["Email"]" @bind-Value="dto.Email" For="@(() => dto.Email)" />

                <br />
                <br />

                <MudGrid Justify="Justify.Center">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">@Loc["Send Reset Password Link"]</MudButton>
                </MudGrid>
            </EditForm>

            <br />
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    SendEmailResetPasswordLinkDTO dto { get; set; } = new SendEmailResetPasswordLinkDTO();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;

        //Return to home if user already loged-in
        if (authState?.User?.Identity?.IsAuthenticated ?? false)
            NavManager.NavigateTo("/");
    }

    private async Task SendLink()
    {
        using var response = await Http.GetAsync($"usermanager/SendPasswordResetLink?email={dto.Email}");

        if(response.IsSuccessStatusCode)
        {
            msgService.Success(Loc["Reset password link has been sent to your email."]);
            NavManager.NavigateTo($"{Constants.IdentityRoutePreifix}/login");
            return;
        };

        var data = await response.Content.ReadFromJsonAsync<ShiftEntityResponse<UserDataDTO>>();
        msgService.Error(data?.Message?.Body!);
    }
}