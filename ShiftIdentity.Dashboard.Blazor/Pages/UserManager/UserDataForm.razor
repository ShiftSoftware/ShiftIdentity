@attribute [Authorize]
@layout Shared.DefaultLayout
@attribute [Route($"{Constants.IdentityRoutePreifix}/{nameof(UserDataForm)}")]
@inherits ShiftForm<UserDataForm, ShiftIdentity.Core.DTOs.User.UserDataDTO>
@inject ShiftModal ShiftModal
@inject HttpClient Http
@inject MessageService MessageService
@using ShiftSoftware.ShiftBlazor.Enums

<ShiftEntityForm @bind-Mode="Mode"
                 @bind-Value="TheItem"
                 @ref="FormContainer"
                 Action="UserManager/UserData"
                 Title="Profile"
                 HideDelete="true"
                 HideRevisions="true"
                 Key="@("")"
                 T=" ShiftIdentity.Core.DTOs.User.UserDataDTO">
    <ToolbarStartTemplate>
        @if (this.Mode == FormModes.View)
        {
            <MudButton OnClick="()=> ShiftModal.Open<ChangePasswordForm>(null, ModalOpenMode.Popup, null)" Size="Size.Small" Color="Color.Warning" StartIcon="@Icons.Material.Filled.Edit" Variant="Variant.Filled">Change Password</MudButton>
        }
    </ToolbarStartTemplate>

    <ChildContent>
        <h2>Security</h2>
        <MudDivider />

        <MudTextField Immediate="true"
                      ReadOnly="@ReadOnly"
                      Disabled="@Disabled"
                      OnlyValidateIfDirty="true"
                      Label="Username"
                      @bind-Value="TheItem.Username"
                      For="@(() => TheItem.Username)" />

        <br />
        <br />

        <h2>Contacts</h2>
        <MudDivider />
        <MudTextField Immediate="true"
                      ReadOnly="@ReadOnly"
                      Disabled="@Disabled"
                      OnlyValidateIfDirty="true"
                      Label="Phone"
                      @bind-Value="TheItem.Phone"
                      For="@(() => TheItem.Phone)" />

        <MudTextField Immediate="true"
                      ReadOnly="@ReadOnly"
                      Disabled="@Disabled"
                      OnlyValidateIfDirty="true"
                      Label="Email"
                      @bind-Value="TheItem.Email"
                      For="@(() => TheItem.Email)" />

        @if (!TheItem.EmailVerified && this.Mode == FormModes.View && !string.IsNullOrWhiteSpace(TheItem.Email))
        {
            <br />
            <MudButton Size="Size.Small"
                       OnClick="SendEmailVerification"
                       Color="Color.Warning"
                       StartIcon="@Icons.Material.Filled.Email"
                       Variant="Variant.Text">
                Send Email Verification
            </MudButton>
        }


        <br />
        <br />

        <h2>Profile</h2>
        <MudDivider />
        <MudTextField Immediate="true"
                      ReadOnly="@ReadOnly"
                      Disabled="@Disabled"
                      OnlyValidateIfDirty="true"
                      Label="Full Name"
                      @bind-Value="TheItem.FullName"
                      For="@(() => TheItem.FullName)" />

        <MudDatePicker ReadOnly="@ReadOnly"
                       Disabled="@Disabled"
                       @bind-Date="TheItem.BirthDate"
                       Label="Birth Date"
                       For="@(() => TheItem.BirthDate)" />

    </ChildContent>
</ShiftEntityForm>

@code {
    private async Task SendEmailVerification()
    {
        var response = await Http.GetAsync("api/usermanager/SendEmailVerificationLink");

        if (response.IsSuccessStatusCode)
        {
            MessageService.Success("Email verification link sent successfully.");
        }
        else
        {
            var result = await response.Content.ReadFromJsonAsync < ShiftEntityResponse<UserDataDTO>>();
            MessageService.Error(result!.Message!.Body!);
        }
    }
}