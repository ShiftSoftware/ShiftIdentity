@attribute [Authorize]
@layout Shared.DefaultLayout
@attribute [Route($"{Constants.IdentityRoutePreifix}/{nameof(UserDataForm)}")]
@inherits ShiftForm<UserDataForm, ShiftIdentity.Core.DTOs.User.UserDataDTO>
@inject ShiftModal ShiftModal
@inject HttpClient Http
@inject MessageService MessageService
@using ShiftSoftware.ShiftBlazor.Enums
@inject ShiftIdentityLocalizer Loc

<ShiftEntityForm @bind-Mode="Mode"
                 @bind-Value="TheItem"
                 @ref="FormContainer"
                 Endpoint="UserManager/UserData"
                 Title="@Loc["Profile"]"
                 HideDelete="true"
                 HideRevisions="true"
                 Key="@("")"
                 T=" ShiftIdentity.Core.DTOs.User.UserDataDTO">
    <ToolbarStartTemplate>
        @if (this.Mode == FormModes.View)
        {
            <MudButton OnClick="()=> ShiftModal.Open<ChangePasswordForm>(null, ModalOpenMode.Popup, null)" Size="Size.Small" Color="Color.Warning" StartIcon="@Icons.Material.Filled.Edit" Variant="Variant.Filled">@Loc["Change Password"]</MudButton>
        }
    </ToolbarStartTemplate>

    <ChildContent>
        <h2>@Loc["Security"]</h2>
        <MudDivider />

        <MudTextField Immediate="true"
                      ReadOnly="@ReadOnly"
                      Disabled="@Disabled"
                      OnlyValidateIfDirty="true"
                      Label="@Loc["Username"]"
                      @bind-Value="TheItem.Username"
                      For="@(() => TheItem.Username)" />

        <br />
        <br />

        <h2>@Loc["Contacts"]</h2>
        <MudDivider />
        <MudTextField Immediate="true"
                      ReadOnly="@ReadOnly"
                      Disabled="@Disabled"
                      OnlyValidateIfDirty="true"
                      Label="@Loc["Phone"]"
                      @bind-Value="TheItem.Phone"
                      For="@(() => TheItem.Phone)" />

        <MudTextField Immediate="true"
                      ReadOnly="@ReadOnly"
                      Disabled="@Disabled"
                      OnlyValidateIfDirty="true"
                      Label="@Loc["Email"]"
                      @bind-Value="TheItem.Email"
                      For="@(() => TheItem.Email)" />

        @if (!TheItem.EmailVerified && this.Mode == FormModes.View && !string.IsNullOrWhiteSpace(TheItem.Email))
        {
            <br />
            <MudButton Size="Size.Small"
                       OnClick="SendEmailVerification"
                       Color="Color.Warning"
                       StartIcon="@Icons.Material.Filled.Email"
                       Variant="Variant.Text">
                @Loc["Send Email Verification"]
            </MudButton>
        }


        <br />
        <br />

        <h2>@Loc["Profile"]</h2>
        <MudDivider />
        <MudTextField Immediate="true"
                      ReadOnly="@ReadOnly"
                      Disabled="@Disabled"
                      OnlyValidateIfDirty="true"
                      Label="@Loc["Full Name"]"
                      @bind-Value="TheItem.FullName"
                      For="@(() => TheItem.FullName)" />

        <MudDatePicker ReadOnly="@ReadOnly"
                       Disabled="@Disabled"
                       @bind-Date="TheItem.BirthDate"
                       Label="@Loc["Birth Date"]"
                       For="@(() => TheItem.BirthDate)" />

        <MudItem xs="6" sm="6" lg="2" xl="2">
            <FileUploader ShowThumbnail="true"
                          Label="@Loc["Signature"]"
                          For="() => TheItem.Signature"
                          MaxFileCount="1"
                          AcceptImages="true"
                          DisableToolbar="true"
                          @bind-Values="TheItem.Signature" />
        </MudItem>

    </ChildContent>
</ShiftEntityForm>

@code {
    private async Task SendEmailVerification()
    {
        var response = await Http.GetAsync("usermanager/SendEmailVerificationLink");

        if (response.IsSuccessStatusCode)
        {
            MessageService.Success(Loc["Email verification link sent successfully."]);
        }
        else
        {
            var result = await response.Content.ReadFromJsonAsync <ShiftEntityResponse<UserDataDTO>>();
            MessageService.Error(result!.Message!.Body!);
        }
    }
}