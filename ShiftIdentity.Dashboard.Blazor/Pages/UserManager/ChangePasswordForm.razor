@attribute [Authorize]
@layout Shared.DefaultLayout
@attribute [Route($"{Constants.IdentityRoutePreifix}/{nameof(ChangePasswordForm)}")]
@inject ShiftModal ShiftModal
@inject MessageService Message
@inject UserManagerService UserManager
@inject AuthService AuthService
@inject StorageService StorageService
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager NavManager
@inject HttpClient http


<MudPaper Elevation="25" Class="pa-5">
    @if (Enforce)
    {
        <MudAlert Severity="Severity.Info">You must change your password</MudAlert>
    }

    <EditForm Model="@dto" OnValidSubmit="Save">
        <DataAnnotationsValidator />

        <MudTextField T="string" Label="Current Password" @bind-Value="dto.CurrentPassword"
                      For="@(() => dto.CurrentPassword)" InputType="InputType.Password" />

        <MudTextField T="string" Label="New Password" HelperText="Choose a strong password" @bind-Value="dto.NewPassword"
                      For="@(() => dto.NewPassword)" InputType="InputType.Password" />

        <MudTextField T="string" Label="Confirm Password" @bind-Value="dto.ConfirmPassword"
                      For="@(() => dto.ConfirmPassword)" InputType="InputType.Password" />

        <br />
        <br />

        <MudGrid Justify="Justify.FlexEnd">
            @if (MudDialog is not null)
            {
                <MudButton StartIcon="@Icons.Material.Filled.Cancel" OnClick="() => Cancel()">Cancel</MudButton>
            }

            <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit">
                <MudIcon Icon="@Icons.Material.Filled.Save" />
                <MudText Style="padding:0 10px;">Save</MudText>
            </MudButton>
        </MudGrid>
    </EditForm>
</MudPaper>

@code {
    private ChangePasswordDTO dto = new ChangePasswordDTO();

    [CascadingParameter]
    protected MudDialogInstance? MudDialog { get; set; }


    [Parameter]
    [SupplyParameterFromQuery]
    public bool Enforce { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    private async Task Cancel()
    {
        if (MudDialog is not null)
            ShiftModal.Close(MudDialog);
    }

    private async Task Save()
    {
        var result = await UserManager.ChangePasswordAsync(dto);

        if (!result.IsSuccess)
        {
            Message.Error(result?.Data?.Message?.Body!, result?.Data?.Message?.Title);
            return;
        }

        if (MudDialog is not null)
        {
            ShiftModal.Close(MudDialog);
            return;
        }

        //if (Enforce)
        //    await AuthService.RefreshAsync();

        NavManager.NavigateTo(ReturnUrl ?? "/", true);
    }
}